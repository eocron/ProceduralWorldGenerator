<UserControl x:Class="ProceduralWorldGenerator.EditorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:nodify="https://miroiu.github.io/nodify"
             xmlns:sys="clr-namespace:System;assembly=System.Runtime"
             xmlns:proceduralWorldGenerator="clr-namespace:ProceduralWorldGenerator"
             xmlns:viewModels="clr-namespace:ProceduralWorldGenerator.ViewModels"
             xmlns:connections="clr-namespace:ProceduralWorldGenerator.ViewModels.Connections"
             xmlns:createNodes="clr-namespace:ProceduralWorldGenerator.Views.CreateNodes"
             xmlns:converters="clr-namespace:ProceduralWorldGenerator.Common.Converters;assembly=ProceduralWorldGenerator.Common"
             xmlns:chunk="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Chunk"
             xmlns:permutation="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Permutation"
             xmlns:simplexNoise="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.SimplexNoise"
             xmlns:worleyNoise="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.WorleyNoise"
             xmlns:valueNoise="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.ValueNoise"
             xmlns:vector="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Vector"
             xmlns:spline="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Spline"
             xmlns:control="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Common"
             xmlns:expression="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Expression"
             xmlns:output="clr-namespace:ProceduralWorldGenerator.ViewModels.Nodes.Output"
             d:DataContext="{d:DesignInstance Type=viewModels:EditorViewModel}"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <GeometryDrawing x:Key="SmallGridGeometry"
                         Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z"
                         Brush="{DynamicResource GridLinesBrush}" />

        <GeometryDrawing x:Key="LargeGridGeometry"
                         Geometry="M0,0 L0,1 0.015,1 0.015,0.015 1,0.015 1,0 Z"
                         Brush="{DynamicResource GridLinesBrush}" />

        <DrawingBrush x:Key="SmallGridLinesDrawingBrush"
                      TileMode="Tile"
                      ViewportUnits="Absolute"
                      Viewport="0 0 15 15"
                      Transform="{Binding ViewportTransform, ElementName=Editor}"
                      Drawing="{StaticResource SmallGridGeometry}" />

        <DrawingBrush x:Key="LargeGridLinesDrawingBrush"
                      TileMode="Tile"
                      ViewportUnits="Absolute"
                      Opacity="0.5"
                      Viewport="0 0 150 150"
                      Transform="{Binding ViewportTransform, ElementName=Editor}"
                      Drawing="{StaticResource LargeGridGeometry}" />

        <LinearGradientBrush x:Key="AnimatedBrush" StartPoint="0 0" EndPoint="1 0">
            <GradientStop Color="#6366f1" Offset="0" />
            <GradientStop Color="#a855f7" Offset="0.5" />
            <GradientStop Color="#ec4899" Offset="1" />
        </LinearGradientBrush>
        <Border x:Key="AnimatedBorderPlaceholder" BorderBrush="{StaticResource AnimatedBrush}" />

        <Storyboard x:Key="AnimateBorder" RepeatBehavior="Forever">
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.StartPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}"
                                    Duration="0:0:2" To="1 0" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.StartPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}" 
                                    Duration="0:0:2" To="1 1" BeginTime="0:0:2" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.StartPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}" 
                                    Duration="0:0:2" To="0 1" BeginTime="0:0:4" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.StartPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}" 
                                    Duration="0:0:2" To="0 0" BeginTime="0:0:6" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.EndPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}" 
                                    Duration="0:0:2" To="1 1" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.EndPoint)" 
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}"
                                    Duration="0:0:2" To="0 1" BeginTime="0:0:2" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.EndPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}" 
                                    Duration="0:0:2" To="0 0" BeginTime="0:0:4" />
            <PointAnimation Storyboard.TargetProperty="BorderBrush.(LinearGradientBrush.EndPoint)"
                                                    Storyboard.Target="{StaticResource AnimatedBorderPlaceholder}" 
                                    Duration="0:0:2" To="1 0" BeginTime="0:0:6" />
        </Storyboard>

        <DataTemplate x:Key="ConnectionTemplate"
                      DataType="{x:Type connections:NodeConnectionViewModel}">
            <nodify:CircuitConnection Source="{Binding Output.Anchor}"
                                      Target="{Binding Input.Anchor}" />
        </DataTemplate>

        <DataTemplate x:Key="PendingConnectionTemplate"
                      DataType="{x:Type connections:PendingNodeConnectionViewModel}">
            <nodify:PendingConnection IsVisible="{Binding IsVisible}"
                                      Source="{Binding Source, Mode=OneWayToSource}"
                                      Target="{Binding Target, Mode=OneWayToSource}"
                                      TargetAnchor="{Binding TargetLocation, Mode=OneWayToSource}"
                                      StartedCommand="{Binding DataContext.StartConnectionCommand, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodifyEditor}}}"
                                      CompletedCommand="{Binding DataContext.CreateConnectionCommand, RelativeSource={RelativeSource AncestorType={x:Type nodify:NodifyEditor}}}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type chunk:CreateChunkNodeViewModel}">
            <createNodes:CreateChunkNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type permutation:CreatePermutationTableNodeViewModel}">
            <createNodes:CreatePermutationTableNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type output:CreateOutputVectorNodeViewModel}">
            <createNodes:CreateOutputVectorNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type simplexNoise:CreateSimplexNoiseNodeViewModel}">
            <createNodes:CreateSimplexNoiseNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type worleyNoise:CreateWorleyNoiseNodeViewModel}">
            <createNodes:CreateWorleyNoiseNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type valueNoise:CreateValueNoiseNodeViewModel}">
            <createNodes:CreateValueNoiseNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type vector:CreateVectorNodeViewModel}">
            <createNodes:CreateVectorNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type expression:CreateExpressionNodeViewModel}">
            <createNodes:CreateExpressionNodeView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type spline:CreateSplineNodeViewModel}">
            <createNodes:CreateSplineNodeView />
        </DataTemplate>
        
        <Style x:Key="ItemContainerStyle"
               TargetType="{x:Type nodify:ItemContainer}"
               BasedOn="{StaticResource {x:Type nodify:ItemContainer}}">
            <Setter Property="Location"
                    Value="{Binding Location}" />
            <Setter Property="IsSelected"
                    Value="{Binding IsSelected}" />
            <Setter Property="ActualSize"
                    Value="{Binding Size, Mode=OneWayToSource}" />
            <Setter Property="BorderBrush" Value="{Binding BorderBrush, Source={StaticResource AnimatedBorderPlaceholder}}" />
            <Setter Property="BorderThickness" Value="2" />
        </Style>
    </UserControl.Resources>

    <Grid>
        <nodify:NodifyEditor DataContext="{Binding Calculator}"
                             ItemsSource="{Binding Operations}"
                             Connections="{Binding Connections}"
                             SelectedItems="{Binding SelectedOperations}"
                             DisconnectConnectorCommand="{Binding DisconnectConnectorCommand}"
                             PendingConnection="{Binding PendingConnection}"
                             PendingConnectionTemplate="{StaticResource PendingConnectionTemplate}"
                             ConnectionTemplate="{StaticResource ConnectionTemplate}"
                             Background="{StaticResource SmallGridLinesDrawingBrush}"
                             ItemContainerStyle="{StaticResource ItemContainerStyle}"
                             GridCellSize="15"
                             AllowDrop="True"
                             Drop="OnDropNode"
                             x:Name="Editor">
            <nodify:NodifyEditor.Resources>
                <Style TargetType="{x:Type nodify:NodeInput}"
                       BasedOn="{StaticResource {x:Type nodify:NodeInput}}">
                    <Setter Property="Header"
                            Value="{Binding}" />
                    <Setter Property="IsConnected"
                            Value="{Binding IsConnected}" />
                    <Setter Property="Anchor"
                            Value="{Binding Anchor, Mode=OneWayToSource}" />
                    <Setter Property="ToolTip"
                            Value="{Binding Value}" />
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="{x:Type connections:NodeConnectorViewModel}">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Title}"
                                               Margin="0 0 5 0" />
                                    <!--<TextBox Text="{Binding Value}"
                                             Visibility="{Binding IsConnected, Converter={converters1:BooleanToVisibilityConverter Negate=True}}" />-->
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style TargetType="{x:Type nodify:NodeOutput}"
                       BasedOn="{StaticResource {x:Type nodify:NodeOutput}}">
                    <Setter Property="Header"
                            Value="{Binding}" />
                    <Setter Property="IsConnected"
                            Value="{Binding IsConnected}" />
                    <Setter Property="Anchor"
                            Value="{Binding Anchor, Mode=OneWayToSource}" />
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="{x:Type connections:NodeConnectorViewModel}">
                                <TextBlock Text="{Binding Title}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <DataTemplate DataType="{x:Type viewModels:GeneratorNodeViewModel}">
                    <nodify:Node Content="{Binding Title}"
                                 Input="{Binding Input}"
                                 Output="{Binding Output}"/>
                </DataTemplate>
                
                <DataTemplate DataType="{x:Type viewModels:GeneratorPreviewNodeViewModel}">
                    <nodify:Node Content="{Binding Title}"
                                 ToolTip="{Binding Description}"/>
                </DataTemplate>

                <DataTemplate DataType="{x:Type control:OperationGroupViewModel}">
                    <nodify:GroupingNode Header="{Binding Title}"
                                         ActualSize="{Binding GroupSize, Mode=TwoWay}" />
                </DataTemplate>
            </nodify:NodifyEditor.Resources>

            <nodify:NodifyEditor.InputBindings>
                <KeyBinding Key="Delete"
                            Command="{Binding DeleteSelectionCommand}" />
                <KeyBinding Key="C"
                            Command="{Binding GroupSelectionCommand}" />
            </nodify:NodifyEditor.InputBindings>

            <nodify:NodifyEditor.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard Name="AnimateBorder" Storyboard="{StaticResource AnimateBorder}" />
                </EventTrigger>
            </nodify:NodifyEditor.Triggers>

            <CompositeCollection>
                <nodify:DecoratorContainer DataContext="{Binding OperationsMenu}"
                                           Location="{Binding Location}">
                    <proceduralWorldGenerator:OperationsMenuView />
                </nodify:DecoratorContainer>
                <nodify:DecoratorContainer  Content="{Binding CreateNodeMenu}"
                                            Location="{Binding CreateNodeMenu.Location}"
                                            Visibility="{Binding CreateNodeMenu.IsVisible, Converter={converters:BooleanToVisibilityConverter}}"/>
            </CompositeCollection>

        </nodify:NodifyEditor>

        <Grid Background="{StaticResource LargeGridLinesDrawingBrush}"
              Panel.ZIndex="-2" />

        <Border HorizontalAlignment="Right" 
                MinWidth="200"
                MaxWidth="300"
                Padding="7"
                Margin="10"
                CornerRadius="3"
                BorderThickness="2">
            <Border.Background>
                <SolidColorBrush Color="{DynamicResource BackgroundColor}"
                                 Opacity="0.7" />
            </Border.Background>
            <ScrollViewer>
                <ItemsControl ItemsSource="{Binding Calculator.OperationsMenu.AvailableOperations}">
                    <ItemsControl.ItemContainerStyle>
                        <Style>
                            <Setter Property="FrameworkElement.Margin" Value="5"/>
                            <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
                            <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
                            <Setter Property="FrameworkElement.ToolTip" Value="Drag and drop into the editor"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type viewModels:GeneratorPreviewNodeViewModel}">
                            <nodify:Node Content="{Binding Title}"
                                     BorderBrush="{StaticResource AnimatedBrush}"
                                     BorderThickness="2"
                                     MouseMove="OnNodeDrag">
                            </nodify:Node>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Border>
    </Grid>
</UserControl>
